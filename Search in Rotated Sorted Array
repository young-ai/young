class Solution:
    """
    @param A: an integer rotated sorted array
    @param target: an integer to be searched
    @return: an integer
    """
    def search(self, A, target):
         # write your code here
    #     if len(A)==0:
    #         return -1
    #     else:
    #         l=0
    #         r=len(A)-1
    #         while l<r:
    #             if target==A[l]:
    #                 return l
    #             if target==A[r]:
    #                 return r
    #             mid=l+(r-l)//2
    #             if target==A[mid]:
    #                 return mid
    #             if A[l]<A[r]:
    #                 if target>A[mid]:
    #                     l=mid+1
    #                     r-=1
    #                 else:
    #                     r=mid-1
    #                     l+=1
    #             else:
    #                 if A[mid]>A[l] and target>A[mid]:
                        
    #                         l=mid+1
    #                         r-=1
    #                 elif A[mid]>A[l] and target>A[l]:
    #                         r=mid-1
    #                         l+=1
    #                 elif A[mid]>A[l] and target<A[r] :
    #                         l=mid+1
    #                         r-=1
    #                 elif A[mid]<A[l] and target>A[l]:
    #                         r=mid-1
    #                         l+=1   
    #                 elif A[mid]<A[l] and target<A[mid]:
    #                         r=mid-1
    #                         l+=1
    #                 else:
    #                         l=mid+1
    #                         r-=1
    #         if A[l]==target:
    #             return l
    #         else: return -1
         if len(A)==0:
             return -1
         else:
             l=0
             r=len(A)-1
             while l<r:
                  if target==A[l]:
                      return l
                  if target==A[r]:
                      return r
                  mid=l+(r-l)//2
                  if target==A[mid]:
                      return mid
                  if A[mid]>A[l]:
                      if A[l]<target<A[mid]:
                          r=mid-1
                      else:l=mid+1
                  else:
                      if A[mid]<target<A[r]:
                          l=mid+1
                      else:r=mid-1
             if target==A[l]:
                return l
             return -1
只需判断target数是否在单增的序列之内，然后对左右边界做加减即可
