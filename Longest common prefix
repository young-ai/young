class Solution:
    """
    @param strs: A list of strings
    @return: The longest common prefix
    """
    def longestCommonPrefix(self, strs):
        # write your code here
        if len(strs)==0:
            return ""
        res=strs[0]
        for str in strs:
            while res!=str[:len(res)]:
                res=res[:-1]
        return res
        
#若res从“”开始增加则需每个字符都要遍历一遍strs,直到不符合要求


#利用trie字典树来解决
class TrieNode(object):
            def __init__(self):
                self.children={}
                self.isword=False
class Trie(object):
    def __init__(self):
                self.root=TrieNode()
    def insert(self,word):
                node=self.root
                for ch in word:
                    if ch not in node.children:
                        node.children[ch]=TrieNode()
                    node=node.children[ch]
                node.isword=True

class Solution:
    """
    @param strs: A list of strings
    @return: The longest common prefix
    """
    def longestCommonPrefix(self, strs):
        # write your code here
        trie=Trie()
        for str in strs:
            if not str:
                return ""
            trie.insert(str)
        root=trie.root
        res=""
        while(len(root.children)==1):
            res+=list(root.children.keys())[0]
            root=root.children[list(root.children.keys())[0]]
        return res
            
            
            
            
            
